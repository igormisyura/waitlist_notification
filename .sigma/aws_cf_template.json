{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates the stack for project Waitlist_Notification. Generated by Sigma",
  "Parameters": {
    "lambdaCodeBucketParameter": {
      "Type": "String",
      "Description": "Name of the S3 bucket containing the Lambda deployment package"
    },
    "lambdaCodeKeyParameter": {
      "Type": "String",
      "Description": "S3 key of the Lambda deployment package"
    }
  },
  "Outputs": {
    "apigwailistApiaddPOST": {
      "Description": "URL of wailist-api/add:POST endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "apigwailistApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/",
            "prod",
            "/add"
          ]
        ]
      }
    },
    "ddbwaitlist": {
      "Description": "Stream ARN of DynamoDB table waitlist",
      "Value": {
        "Fn::GetAtt": [
          "ddbwaitlist",
          "StreamArn"
        ]
      }
    },
    "WaitlistNotification": {
      "Description": "ARN of Lambda function WaitlistNotification",
      "Value": {
        "Fn::GetAtt": [
          "WaitlistNotification",
          "Arn"
        ]
      }
    },
    "sendEmail": {
      "Description": "ARN of Lambda function sendEmail",
      "Value": {
        "Fn::GetAtt": [
          "sendEmail",
          "Arn"
        ]
      }
    }
  },
  "Resources": {
    "apigwailistApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "An API generated by Sigma",
        "Name": "wailist-api",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "apigwailistApiadd": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "apigwailistApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "apigwailistApi",
            "RootResourceId"
          ]
        },
        "PathPart": "add"
      }
    },
    "apigwailistApiaddPOST": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "apigwailistApi"
        },
        "ResourceId": {
          "Ref": "apigwailistApiadd"
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaitlistNotification.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ]
        }
      }
    },
    "apigwailistApiaddCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "apigwailistApi"
        },
        "ResourceId": {
          "Ref": "apigwailistApiadd"
        },
        "HttpMethod": "OPTIONS",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ddbwaitlist": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "waitlist",
        "AttributeDefinitions": [
          {
            "AttributeName": "Name",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "Name",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        }
      }
    },
    "WaitlistNotification": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "WaitlistNotification",
        "Description": "Invokes functions defined in Waitlist_Notification.js in project Waitlist_Notification. Generated by Sigma.",
        "Code": {
          "S3Bucket": {
            "Ref": "lambdaCodeBucketParameter"
          },
          "S3Key": {
            "Ref": "lambdaCodeKeyParameter"
          }
        },
        "MemorySize": 128,
        "Handler": "Waitlist_Notification.handler",
        "Timeout": 60,
        "Runtime": "nodejs10.x",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "WaitlistNotificationExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "SIGMA_AWS_ACC_ID": {
              "Ref": "AWS::AccountId"
            }
          }
        }
      }
    },
    "WaitlistNotificationExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "WaitlistNotificationPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "ddbwaitlist",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "apigwailistApiaddPOSTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "WaitlistNotification"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "POST",
              "__Path__": "/add",
              "__ApiId__": {
                "Ref": "apigwailistApi"
              }
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "sendEmail": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "sendEmail",
        "Description": "Invokes functions defined in send-email.js in project Waitlist_Notification. Generated by Sigma.",
        "Code": {
          "S3Bucket": {
            "Ref": "lambdaCodeBucketParameter"
          },
          "S3Key": {
            "Ref": "lambdaCodeKeyParameter"
          }
        },
        "MemorySize": 128,
        "Handler": "send-email.handler",
        "Timeout": 60,
        "Runtime": "nodejs10.x",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "sendEmailExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "SIGMA_AWS_ACC_ID": {
              "Ref": "AWS::AccountId"
            }
          }
        }
      }
    },
    "sendEmailExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "sendEmailPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "SES:SendEmail",
                    "SES:SendRawEmail"
                  ],
                  "Resource": [
                    "arn:aws:ses:us-west-2:186674300764:identity/imisyura@amazon.com",
                    "arn:aws:ses:us-west-2:186674300764:identity/igor@some-email-domain.com"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:ListStreams",
                    "dynamodb:DescribeStream",
                    "dynamodb:GetShardIterator",
                    "dynamodb:GetRecords"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "ddbwaitlist",
                      "StreamArn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "ddbwaitlistTriggersendEmail0": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": "100",
        "EventSourceArn": {
          "Fn::GetAtt": [
            "ddbwaitlist",
            "StreamArn"
          ]
        },
        "StartingPosition": "LATEST",
        "FunctionName": {
          "Ref": "sendEmail"
        }
      }
    },
    "ddbwaitlistPermissionsendEmail": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "sendEmail"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "ddbwaitlist",
            "StreamArn"
          ]
        },
        "Principal": "dynamodb.amazonaws.com"
      }
    },
    "apigwailistApiDeployment1615269150874": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "apigwailistApi"
        },
        "Description": "An API deployment generated by Sigma for API wailist-api",
        "StageName": "prod"
      },
      "DependsOn": [
        "apigwailistApiaddPOST",
        "apigwailistApiaddCors"
      ]
    }
  }
}